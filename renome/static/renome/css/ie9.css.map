{"version":3,"sources":["ie9.scss","../../node_modules/susy/sass/susy/language/susy/_span.scss"],"names":[],"mappings":"AAEE;EADF;IAEI,YAAY,EAEf,EAAA;;AAED;EACG,kBAAkB,EAOpB;EANC;IAFF;MAGK,oBAAoB,EAKxB,EAAA;EAHC;IALF;MAMK,qBAAqB,EAEzB,EAAA;;AACD;EACE,mBAAmB,EACpB;;AAED;EACG,iBCsIqB,EDrIvB;;AAED;EACE,mBAAmB,EAIpB;EAHC;IAFF;MAGI,oBAAoB,EAEvB,EAAA;;AAED;EACI,cAAc,EACjB;;AAGC;EADF;IAEI,WAAW,EAEd,EAAA;;AAGC;EADF;IAEG,eAAe,EAEjB,EAAA;;AAGC;EADF;IAEK,6BAA6B,EAEjC,EAAA;;AAGC;EADF;IAEI,iBAAiB,EAKpB,EAAA;;AAHC;EAJF;IAKI,iBAAiB,EAEpB,EAAA;;AAGC;EADF;IAEI,YAAY,EAEf,EAAA;;AAEC;EADF;IAEI,kBAAkB,EAErB,EAAA","file":"ie9.css","sourcesContent":["@import 'susy';\r\n.logo__navButton {\r\n  @media (max-width: 460px) { \r\n    right: 38vw;\r\n  }\r\n}\r\n// Search\r\n.searchForm__inputSearch {\r\n   margin-left: -9px; \r\n  @media (max-width: 768px) { \r\n     padding-bottom: 4px;\r\n  }\r\n  @media (max-width: 460px) { \r\n     padding-bottom: 10px;\r\n  }\r\n}\r\n.searchForm__btnSearch {\r\n  margin-bottom: 6px; \r\n}\r\n// Sub nav \r\n.subnavList__subCategory {\r\n   width: span(6 of 12);\r\n}\r\n\r\n.collectionSlider__slides {\r\n  padding-bottom: 8%;\r\n  @media (max-width: 460px) { \r\n    padding-bottom: 18%;\r\n  }\r\n}\r\n\r\n.collectionSlider__slides .slick-dots {\r\n    bottom: -40px;\r\n}\r\n\r\n.listTiles__tile {\r\n  @media (max-width: 460px) { \r\n    width: 48%;\r\n  }\r\n}\r\n\r\n.coverTiles {\r\n  @media (max-width: 460px) { \r\n   padding: 10% 0;\r\n  }\r\n}\r\n\r\n.tilesList__tile{\r\n  @media (max-width: 460px) { \r\n     margin-top: 100px !important;\r\n  }\r\n}\r\n\r\n.optionsList__refer {\r\n  @media (max-width: 978px) and (min-width: 768px) {\r\n    position: static;\r\n  }\r\n  @media (max-width: 460px) {\r\n    position: static;\r\n  }\r\n}\r\n\r\n.listWorks__item {\r\n  @media (max-width: 1199px) and (min-width: 768px) {\r\n    float: none;\r\n  }\r\n}\r\n.project__projectBody {\r\n  @media (max-width: 1199px) and (min-width: 768px) {\r\n    max-height: 400px;\r\n  }\r\n}\r\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n"]}